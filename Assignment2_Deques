/*
    A double-end queue or deque is a generalization of
    a stack and a queue that supports adding and removing items
    from either the front or the back of the data structure.
 */

import java.util.Iterator;
import edu.princeton.cs.algs4.StdOut;


public class Deque<Item> implements Iterable<Item> {

    private Node first;
    private Node last;
    private int size;

    private class Node{
        Item item;
        Node next;
        Node prev;
    }

    // construct an empty deque
    public Deque(){
        first = last = null;
        size = 0;
    }

    // is the deque empty?
    public boolean isEmpty(){
        return size == 0;
    }

    // return the size of the deque
    public int size(){
        return size;
    }

    // add a new item from the head
    public void addFirst(Item item){
        if (item == null){
            throw new java.lang.IllegalArgumentException();
        }
        Node oldFirst = first;
        first = new Node();
        first.item = item;
        first.next = oldFirst;
        if (isEmpty()){
            last = first;
        } else {
            oldFirst.prev = first;
        }
        size++;
    }

    // add a new item from the end
    public void addLast(Item item){
        if (item == null){
            throw new java.lang.IllegalArgumentException();
        }
        Node oldLast = last;
        last = new Node();
        last.item = item;
        last.next = null;
        if (isEmpty()){
            first = last;
            last.prev = null;
        } else {
            last.prev = oldLast;
            oldLast.next = last;
        }
        size++;
    }

    // remove and return the item from the front
    public Item removeFirst(){
        if (size == 0){
            throw new java.util.NoSuchElementException();
        }
        Item head = first.item;
        first = first.next;
        if (isEmpty()){
            last = null;
        } else {
            first.prev = null;
        }
        size--;
        return head;
    }

    // remove and return the item from the end
    public Item removeLast(){
        if (size == 0){
            throw new java.util.NoSuchElementException();
        }
        Item end = last.item;
        last = last.prev;
        if (isEmpty()){
            first = null;
            last = null;
        } else {
            last.next = null;
        }
        size--;
        return end;
    }

    // return an iterator over items in order from front to end
    public Iterator<Item> iterator(){
        return new ListIterator();
    }

    private class ListIterator implements Iterator<Item>{
        private Node current = first;

        public boolean hasNext(){
            return current != null;
        }

        public void remove(){
            throw new UnsupportedOperationException("Item cannot be removed");
        }

        public Item next(){
            if (!hasNext()){
                throw new java.util.NoSuchElementException();
            }
            Item item = current.item;
            current = current.next;
            return item;
        }
    }

    public static void main(String[] args){
        Deque<String> deque = new Deque<String>();
        deque.addFirst("aa");
        deque.addFirst("bb");
        deque.addFirst("cc");
        deque.addLast("dd");
        deque.addLast("ee");

        for(String s: deque)
            StdOut.println(s);

        StdOut.println(deque.size());
        StdOut.println(deque.removeFirst());
        StdOut.println(deque.removeFirst());
        StdOut.println(deque.size());
        StdOut.println(deque.removeLast());

    }
}
